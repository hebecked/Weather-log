#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
# A script by Dustin Hebecker

import WeatherStation.WeatherStation as WeatherStation
import time
import numpy as np
import os.path
import argparse
import fileinput
import sys


def dew_point(temp_out,hum_out,default=false):
	if temp_out==None or hum_out==None:
		if default:
			return '0'
		else:
			return 'None'
	else:
		return str(format(WeatherStation.dew_point(temp_out,hum_out),".2f"))



parser = argparse.ArgumentParser(description='This script is meant for the analysis of WLS absorbtion measurements.')
#parser.add_argument('-ci', '--check-integrity', dest='CHECK', action='store_true', help='Check whether the output file contains all Data sets that are still left in the memory of the weather Station.', default=False)
parser.add_argument('-c', '--current', dest='CURRENT', action='store_true', help='Append current conditions to output file.', default=False)
parser.add_argument('-s', '--show', dest='SHOW', action='store_true', help='Show current conditions on standard output', default=False)
parser.add_argument('-p', '--path', dest='PATH', action='store', type=str, help='Defines where the log file is/will be stored. only valid with -ci and/or -c', default="weather.txt")
parser.add_argument('-d', '--default', dest='DEFAULT', action='store_true', help='Insert default values instead of None for unknown values.', default=False)

args = parser.parse_args()

if args.CURRENT or args.SHOW:

	wind_dirs=['N','NNE','NE','ENE','E','ESE','SE','SSE','S','SSW','SW','WSW','W','WNW','NW','NNW']

	ws = WeatherStation.weather_station()
	weather = ws.get_data(ws.current_pos(), True)

	ws_time = time.strptime(ws.get_fixed_block(['date_time'],True), "%Y-%m-%d %H:%M")
	pc_time = time.localtime()
	pc_month = time.strftime("%b");

	#compare times, print warning if offset is too big
	diff_time=np.fabs(time.mktime(pc_time)-time.mktime(ws_time))
	if( diff_time > 600 ):
		print "Warning:\nThe time difference between weather station and computer exceeds reasonable limits!!!"

	time_str = ( str(pc_time.tm_year) + "-" + str(pc_month) + "-" + str(pc_time.tm_mday).zfill(2) + " " + str(pc_time.tm_hour).zfill(2) + ":" + str(pc_time.tm_min).zfill(2) + ":" + str(pc_time.tm_sec).zfill(2) + " " + time.strftime("%Z", time.localtime()) + ["", "+"][-time.timezone/3600+time.daylight > 0] + str(-time.timezone/3600+time.daylight).zfill(2) )

	if args.DEFAULT:
		weather_str = (  time_str + "   " + [str(weather['temp_in']), "-20"][str(weather['temp_in'])=='None']  + " " + [str(weather['temp_out']), "-20"][str(weather['temp_out'])=='None'] + " " + 
					dew_point(weather['temp_out'],weather['hum_out'], default=True) + " " + 
					[str(weather['hum_in']), "0"][str(weather['hum_in'])=='None']  + " " + [str(weather['hum_out']), "0"][str(weather['hum_out'])=='None']  + " " + [str(weather['wind_ave']), "0"][str(weather['wind_ave'])=='None'] +
					" " + str(weather['wind_dir']) + " " + str(wind_dirs[int(weather['wind_dir']*16./360.)]) + " " + [str(weather['wind_gust']), "0"][str(weather['wind_gust'])=='None'] + " " + 
					[str(WeatherStation.wind_chill(weather['temp_out'], weather['wind_ave'])), "0"][str(WeatherStation.wind_chill(weather['temp_out'], weather['wind_ave']))=='None']  + " " + [str(weather['rain']), "0"][str(weather['rain'])=='None'] +
					" " + [str(weather['abs_pressure']), "800"][str(weather['abs_pressure'])=='None']  + "\n")
	else:
		weather_str = (  time_str + "   " + str(weather['temp_in']) + " " + str(weather['temp_out']) + " " + dew_point(weather['temp_out'],weather['hum_out']) + " " + str(weather['hum_in']) + " " + str(weather['hum_out']) + " " + str(weather['wind_ave']) +
					" " + str(weather['wind_dir']) + " " + str(wind_dirs[int(weather['wind_dir']*16./360.)]) + " " + str(weather['wind_gust']) + " " + str(WeatherStation.wind_chill(weather['temp_out'], weather['wind_ave'])) + " " + str(weather['rain']) +
					" " + str(weather['abs_pressure']) + "\n")

	legend1 = "#date       time               T_i   T_a  Dewp    H_i  H_a     Wspd   Wdir  Wdir   Gust Chill     Rain   Pressure\n"
	legend2 = "#                              °C    °C    °C      %    %      m/s      °          m/s    °C       mm        hPa\n"
	if args.CURRENT:
		if not os.path.isfile(args.PATH):
			FILE = open(args.PATH,"w")
			FILE.write(legend1)
			FILE.write(legend2)
		else:
			FILE = open(args.PATH,"a")
		FILE.write(weather_str)
		FILE.close()

	if args.SHOW:
		print legend1
		print legend2
		print weather_str

'''ToDO: implement consitency check!!!'''
