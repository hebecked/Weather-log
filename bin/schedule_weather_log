#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
# A script by Dustin Hebecker

import time
import os
import argparse
import sys
import subprocess

if os.geteuid() != 0:
    exit("You need to have root privileges to run this script.\nPlease try again, this time using 'sudo'. Exiting.")

def make_schedule(time=-1, pos=-1, flag=''):
	#os.path.realpath(__file__)
	#os.path.abspath(pathname)
	prog_path = os.path.split(os.path.realpath(__file__))[0]
	prog = os.path.join(prog_path,"get_weather")
	sring = ""
	if time!=-1:
		for i in range(5):
			if pos==i:
				string+="*/" + str(time) + " "
			else
				string+="* "
	string +=prog
	if flag !='':
		string += " " + flag
	return string

parser = argparse.ArgumentParser(description='This script is meant for create and remove automatic weather logs using crontab.')
parser.add_argument('-ci', '--create-integrity-check', dest='INT', action='store', type=int, help='Schedule an integrity check of the data taken, with the data stored in the weather stations log. Please supply a interval for this checks in hours. For clean scheduling the number should be a divisor of 24.', default=12)
parser.add_argument('-cl', '--create-logging', dest='LOG', action='store', type=int, help='Schedule the logging of weather data from the weather station. Pleas supply a interval in Minutes. For clean scheduling the number should be a divisor of 60', default=20)
parser.add_argument('-ri', '--remove-integritey-check', dest='RINT', action='store', type=int, help='Remove a schedule for an integrity check. Supply the interval or -1 to remove all.', default=12)
parser.add_argument('-rl', '--remove-logging', dest='RLOG', action='store', type=int, help='Remove a logging schedule. Supply the interval or -1 to remove all.', default=20)
parser.add_argument('-f', '--flag', dest='FLAG', action='store', type=str, help='A additional flag that is to be appended to the function call. E.g. output path.', default="")

args = parser.parse_args()


TEMPFILE = open('/tmp/cron.tmp','w')
proc = subprocess.Popen(['crontab','-l'], stdout=subprocess.PIPE)

for line in proc.stdout.readline():
	if line == '':
		break
	if args.SHOW and line.find(make_schedule())!=-1:
		print line
	if args.RINT and line.find(make_schedule(time=args.RINT,pos=1,"-ci"))!=-1:
		print "Found and removed"
	elif args.RLOG and line.find(make_schedule(time=args.RLOG,pos=0,"-c"))!=-1:
		print "Found and removed"
	else:
		TEMPFILE.write(line)
if args.FLAG!="":
	flag=" " + args.FLAG
else:
	flag=""
if args.INT:
	TEMPFILE.write(make_schedule(time=args.INT, pos=1, flag='-ci') + flag)
if args.LOG:
	TEMPFILE.write(make_schedule(time=args.INT, pos=0, flag='-c') + flag)

TEMPFILE.close()
os.system('crontab /tmp/cron.tmp')
os.system('rm -f /tmp/cron.tmp')



'''
crontab -l /show
crontab -r /remove
crontab filename / overwrite exiting file with new one
#minute (0-59), hour (0-23, 0 = midnight), day (1-31), month (1-12), weekday (0-6, 0 = Sunday), command 
#create and erase con jobs
'''